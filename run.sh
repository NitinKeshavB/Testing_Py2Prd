#!/bin/bash

set -e

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

function install {
    python -m pip install --upgrade pip
    python -m pip install --editable "$THIS_DIR/[dev]"
}

# run linting, formatting, and other static code quality tools
#function lint {
#    pre-commit run --all-files
#}help


# build a wheel and sdist from the Python source code
function build {
    python -m build --sdist --wheel "$THIS_DIR/"
}

function start {
    echo "Starting Build!!"
}

function try-load-dotenv {
    if [ -f "$THIS_DIR/.env" ]; then
        
        
        while read -r line; do
            export "$line"
        done < <(grep -v '^#' "$THIS_DIR/.env" | grep -v '^$')
    else {
        echo "No .env file found"
    }
    fi
}

function publish:test {
    try-load-dotenv
    twine upload dist/* \
        -r testpypi \
        -u=__token__ \
        -p="$TEST_PYPI_TOKEN"
 }


function publish:prod {
    try-load-dotenv
    twine upload dist/* \
        -r pypi \
        -u=__token__ \
        -p="$PROD_PYPI_TOKEN"
 }
 function release:test {
    clean
    build
    publish:test
 }

  function release:prod {
    #release:test
    publish:prod

 }


  function test:all {
    python -m pytest "$THIS_DIR/tests/" --cov "$THIS_DIR/astro_package" --cov-report html --cov-report term

 }

   function serve-test-cov {
    python -m http.server --directory "$THIS_DIR/htmlcov/"

 }

  function lint {
    pre-commit run --all-files
 }


 # remove all files generated by tests, builds, or operating this codebase
function clean {
    rm -rf dist build coverage.xml test-reports
    find . \
      -type d \
      \( \
        -name "*cache*" \
        -o -name "*.dist-info" \
        -o -name "*.egg-info" \
        -o -name "*htmlcov" \
      \) \
      -not -path "*setupenv/*" \
      -exec rm -r {} + || true

    find . \
      -type f \
      -name "*.pyc" \
      -not -path "*setupenv/*" \
      -exec rm {} +
}



# print all functions in this file
function help {
    echo "$0 <task> <args>"
    echo "Tasks:"
    compgen -A function | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time ${@:-help}
